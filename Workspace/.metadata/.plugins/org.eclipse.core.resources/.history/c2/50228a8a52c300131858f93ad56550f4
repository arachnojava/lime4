package com.mhframework.gameplay.tilemap.view;


import com.mhframework.MHRenderable;
import com.mhframework.MHScreenManager;
import com.mhframework.core.math.MHVector;
import com.mhframework.core.math.geom.MHRectangle;
import com.mhframework.gameplay.MHGameWorldData;
import com.mhframework.gameplay.actor.MHActor;
import com.mhframework.gameplay.actor.MHActorList;
import com.mhframework.gameplay.tilemap.MHLayersEnum;
import com.mhframework.gameplay.tilemap.MHMapCellAddress;
import com.mhframework.gameplay.tilemap.MHTile;
import com.mhframework.gameplay.tilemap.MHTileGrid;
import com.mhframework.gameplay.tilemap.MHTileMapDirection;
import com.mhframework.gameplay.tilemap.MHTileSet;
import com.mhframework.platform.MHPlatform;
import com.mhframework.platform.event.MHInputEventHandler;
import com.mhframework.platform.event.MHMouseTouchEvent;
import com.mhframework.platform.graphics.MHBitmapImage;
import com.mhframework.platform.graphics.MHColor;
import com.mhframework.platform.graphics.MHFont;
import com.mhframework.platform.graphics.MHGraphicsCanvas;

/********************************************************************
 * Base class for deriving tile-based map objects.  It may be used by
 * itself for creating rectangular tile maps and extended to make
 * isometric and hexagonal maps.  This class and its subclasses
 * handle the presentation of and user interaction with the data
 * contained in an MHGameWorldData object.
 * 
 * @author Michael Henson
 */
public class MHTileMapView
{
	////////////////////////////
	////    Data Members    ////
	////////////////////////////

	/** Object containing the map data. */
	private MHGameWorldData mapData;

	/** A rectangle containing the screen coordinates. */
	protected MHRectangle screenSpace;

	/** A rectangle containing all of the coordinates of the
	 * entire virtual world. */
	protected MHRectangle worldSpace;

	/** A rectangle defining the difference between the screen
	 * space and the world space which is used for clipping
	 * and stuff.
	 */
	protected MHRectangle anchorSpace;

	/** The upper-left corner of the visible portion of
	 * the map.  The width and height are determined by the 
	 * screenSpace rectangle.
	 */
	protected MHVector screenAnchor = new MHVector(0, 0);

	protected MHMapCellAddress cursorAddress = new MHMapCellAddress();
	protected MHVector cursorPoint = new MHVector();
	
	private MHRectangle scrollUpZone, scrollDownZone, scrollRightZone, scrollLeftZone;

	private boolean mouseScroll = false;

	private MHBitmapImage buffer;

	// Visibility variables
	protected boolean gridOn = false;
    private boolean cursorOn;
    private boolean[] layerVisible;

    private boolean idOn = false;


	////////////////////////////
	////      Methods       ////
	////////////////////////////

	/****************************************************************
	 * Constructor.  Creates the map data structure and sets up the
	 * virtual spaces (screen space, world space, and anchor space).
	 *
	 * @param data      A reference to the game world data.
	 */
	public MHTileMapView(MHGameWorldData data)
	{
		mapData = data;
		
		layerVisible = new boolean[MHLayersEnum.values().length];
		for (int i = 0; i < layerVisible.length; i++)
		    layerVisible[i] = true;

		//set screen space
		setScreenSpace(0, 0, MHScreenManager.getDisplayWidth(), MHScreenManager.getDisplayHeight());
	}


	public void setMapData(MHGameWorldData data)
	{
	    if (data != null)
	        mapData = data;
	    
	       
        //set world space
        calculateWorldSpace();

        //set anchor space
        calculateAnchorSpace();

	}
	
	
	public boolean isLayerVisible(MHLayersEnum layer)
	{
	    return layerVisible[layer.getID()];
	}
	
	
	public void setLayerVisible(MHLayersEnum layer, boolean isVisible)
	{
	    layerVisible[layer.getID()] = isVisible;
	}
	
	
	/****************************************************************
	 * Tile plotter.  Converts map coordinates to screen coordinates.
	 *
	 * Remember, this version is intended for rectangular tile maps.
	 * It must be overridden to work for isometric and hex maps.
	 *
	 * @param mapRow  The row of the map whose pixel position is
	 *                 being calculated.
	 * @param mapCol  The column of the map whose pixel position is
	 *                 being calculated.
	 *
	 * @return The pixel position on screen where the base tile is
	 *          to be rendered.
	 */
	public MHVector plotTile(final int mapRow, final int mapCol)
	{
		MHVector plotPoint;

		// Calculate world coordinates
		final int x = mapCol * getTileWidth();
		final int y = mapRow * getTileHeight();

		// Convert world coordinates to screen coordinates
		plotPoint = worldToScreen(new MHVector(x, y));

		return plotPoint;
	}


	public MHVector calculateBasePoint(MHActor actor)
	{
		return actor.getPosition().add(actor.getWidth()/2, actor.getHeight());
	}

	/****************************************************************
	 * Scrolls the map in the distance specified by the input
	 * parameters.
	 *
	 * @param scrollX  The horizontal distance in pixels to scroll
	 *                 the map
	 * @param scrollY  The vertical distance in pixels to scroll
	 *                 the map
	 */
	public void scrollMap(final int scrollX, final int scrollY)
	{
		// Move the screen anchor.
		screenAnchor.translate(scrollX, scrollY);

		// Clip the screen anchor
		clipScreenAnchor();

		setCursorAddress(mapMouse(MHInputEventHandler.getInstance().getMousePosition()));
	}
	
	
	public void setCursorAddress(MHMapCellAddress addr)
	{
		cursorAddress = addr;
		clipCursorAddress();
	}


	protected void clipScreenAnchor()
	{
		// Right edge
		if (screenAnchor.getX() >= anchorSpace.width)
			screenAnchor.setX(anchorSpace.width - 1);

		// Bottom edge
		if (screenAnchor.getY() >= anchorSpace.height)
			screenAnchor.setY(anchorSpace.height - 1);

		// Left edge
		if (screenAnchor.getX() < anchorSpace.x)
			screenAnchor.setX(anchorSpace.x);

		// Top edge
		if (screenAnchor.getY() < anchorSpace.y)
			screenAnchor.setY(anchorSpace.y);
	}

	
	public boolean canScrollUp()
	{
	    return screenAnchor.y - 1 >= anchorSpace.y;
	}
	

    public boolean canScrollDown()
    {
        return screenAnchor.y + 1 < anchorSpace.height;
    }

    
    public boolean canScrollLeft()
    {
        return screenAnchor.x - 1 >= anchorSpace.x;
    }

    
    public boolean canScrollRight()
    {
        return screenAnchor.x + 1 < anchorSpace.width;
    }
    
	/****************************************************************
	 * Convert screen coordinates to world coordinates.
	 *
	 * @param screen  A point in screen coordinates.
	 *
	 * @return  The input screen point translated into world
	 *           coordinates.
	 */
	public MHVector screenToWorld(final MHVector screen)
	{
		// translate into plotspace coordinates
		MHVector world = screenToLocal(screen);
		
		// translate into world coordinates
		world = world.add(screenAnchor);

		return world;
	}


	/****************************************************************
	 * Convert world coordinates to screen coordinates.
	 *
	 * @param location  A point in world space.
	 *
	 * @return A point in screen space.
	 */
	public MHVector worldToScreen(final MHVector location)
	{
		int screenX, screenY;

		// translate into plotspace coordinates
		screenX = (int)(location.getX() - screenAnchor.getX());
		screenY = (int)(location.getY() - screenAnchor.getY());

		// translate into screen coordinates
		// NOTE:  This is unnecessary if we just render straight to a
		//        buffer instead of to the screen.
		//screenX += screenSpace.x;
		//screenY += screenSpace.y;

		return new MHVector(screenX, screenY);
	}


	/****************************************************************
	 * Calculate the anchor space for this tile map.
	 */
	protected void calculateAnchorSpace()
	{
		int width = worldSpace.width - screenSpace.width;
		int height = worldSpace.height - screenSpace.height;

		if(width <= 0)
			width = 1;

		if(height <= 0)
			height = 1;

		anchorSpace = new MHRectangle();
		anchorSpace.setRect(worldSpace.x, worldSpace.y, width, height);
	}


	/****************************************************************
	 * Calculate the world space for this tile map.
	 */
	protected void calculateWorldSpace()
	{
		//set worldspace rect to empty
		worldSpace = new MHRectangle();

		if (mapData == null) return;
		
		//point for plotting
		MHVector ptPlot;

		// Parameters for world space rectangle
		int wx = 0,
				wy = 0,
				width = 0,
				height = 0;

		//loop through map positions
		for(int row = 0; row < mapData.getWorldHeight(); row++)
		{
			for(int col = 0; col < mapData.getWorldWidth(); col++)
			{
				//plot the map point
				ptPlot = plotTile(row, col);

				//expand the boundaries of worldspace
				//left
				wx = (int) Math.min(ptPlot.getX(), worldSpace.x);

				//top
				wy = (int) Math.min(ptPlot.getY(), worldSpace.y);

				//right
				width = (int) Math.max(ptPlot.getX() + getTileWidth(),
						worldSpace.width);

				//bottom
				height = (int) Math.max(ptPlot.getY() + getTileHeight(),
						worldSpace.height);

				worldSpace.setRect(wx, wy, width, height);

			} // for (int col...
		} // for (int row...
	}


	/****************************************************************
	 * Returns the width of a base tile in this tile map.
	 */
	public int getTileWidth()
	{
		return mapData.getTileWidth();
	}


	/****************************************************************
	 * Returns the height of a base tile in this tile map.  For
	 * normal rectangular maps, the tile height is usually the same
	 * as the tile width because the tiles are square.  Override
	 * this method in subclasses requiring something different, such
	 * as isometric maps.
	 */
	public int getTileHeight()
	{
		return mapData.getTileHeight();
	}


	/****************************************************************
	 * Determines if the given point is a valid world coordinate.
	 *
	 * @return  True if the given point is a valid point in world
	 *          space; false otherwise.
	 */
	public boolean isWorldCoordinate(final MHVector p)
	{
		return worldSpace.contains(p);
	}


	/****************************************************************
	 * Determines if the given point is a valid screen coordinate.
	 *
	 * @return  True if the given point is a valid point in screen
	 *          space; false otherwise.
	 */
	public boolean isScreenCoordinate(final MHVector p)
	{
		return screenSpace.contains(p);
	}


	/****************************************************************
	 * Determines if the given point is a valid anchor coordinate.
	 *
	 * @return  True if the given point is a valid point in anchor
	 *          space; false otherwise.
	 */
	public boolean isAnchorCoordinate(final MHVector p)
	{
		return anchorSpace.contains(p);
	}


	/****************************************************************
	 * Defines the bounds of the screen space.  Screen space is the
	 * area on the screen where the game world is visible.
	 */
	public void setScreenSpace(int x, int y, final int width, final int height)
	{
		setScreenSpace(new MHRectangle(x, y, width, height));
	}


	/****************************************************************
	 * Defines the bounds of the screen space.  Screen space is the
	 * area on the screen where the game world is visible.
	 */
	public void setScreenSpace(MHRectangle viewRect)
	{
		screenSpace = viewRect;

        //set world space
        calculateWorldSpace();
        
//        screenSpace.width = Math.min(screenSpace.width, worldSpace.width);
//        screenSpace.height = Math.min(screenSpace.height, worldSpace.height);

        //set anchor space
        calculateAnchorSpace();

        // Create the mouse scroll zones.
        //createScrollZones();

        buffer = MHPlatform.createImage(getScreenSpace().width, getScreenSpace().height);
	}

	
	private void createScrollZones() 
	{
		int x = screenSpace.x;
		int y = screenSpace.y;
		int w = screenSpace.width;
		int h = screenSpace.height;
		int zoneSize = 32;
		
		scrollUpZone = new MHRectangle(x, y, w, zoneSize);
		scrollDownZone = new MHRectangle(x, y+h-zoneSize, w, zoneSize);
		scrollLeftZone = new MHRectangle(x, y, zoneSize, h);
		scrollRightZone = new MHRectangle(x+w-zoneSize, y, zoneSize, h);
	}


	/****************************************************************
	 * Converts mouse coordinates into a map cell address.
	 *
	 * @param screenPoint  A point indicating the current physical
	 *                    location of the mouse cursor on screen.
	 *
	 * @return  The address of the map cell containing the mouse
	 *           cursor.
	 */
	public MHMapCellAddress mapMouse(MHVector screenPoint)
	{
		final MHMapCellAddress mapCell = new MHMapCellAddress();
		//MHVector refPoint = plotTile(0,0);

		//convert from screen to world
		MHVector worldPoint = screenToWorld(screenPoint);

		// calculate reference point
		//refPoint = refPoint.translate(screenSpace.x, screenSpace.y);

		//subtract reference point
		//worldPoint = worldPoint.subtract(refPoint);

		mapCell.column=(int)(worldPoint.getX()/getTileWidth());
		mapCell.row=(int)(worldPoint.getY()/getTileHeight());

		//return map coordinate
		return(mapCell);
	}


	/****************************************************************
	 * Returns a reference to the MHMapGrid object serving as the map's
	 * data structure.
	 *
	 * @return A reference to the map data object
	 */
	public MHGameWorldData getMapData()
	{
		return mapData;
	}


	public void setMouseScroll(boolean mouseScroll)
	{
		this.mouseScroll  = mouseScroll;
	}


	public void update(long elapsedTime)
	{
		//            for (int row = 0; row < mapData.getHeight(); row++)
		//                for (int col = 0; col < mapData.getWidth(); col++)
		//                    for (int layer = 0; layer < MHMapCell.NUM_LAYERS; layer++)
		//                    {
		//                        MHActor a = mapData.getMapCell(row, col).getLayer(layer);
		//                        if (a != null)
		//                        {
		//                            a.advance();
		//                        }
		//                    }
	    
	    if (buffer.getWidth() != screenSpace.width || buffer.getHeight() != screenSpace.height)
	        buffer.redimension(screenSpace.width, screenSpace.height);

	    if (mouseScroll)
	        checkForScroll();

	}


	public void render(final MHGraphicsCanvas g, MHActorList actors)
	{
		MHGraphicsCanvas bg = buffer.getGraphicsCanvas();
		bg.fill(MHColor.BLACK);
		MHRectangle visibleTiles = new MHRectangle();
		int tileWidth = getTileWidth();
		int tileHeight = getTileHeight();
		int viewWidth = getScreenSpace().width;
		int viewHeight = getScreenSpace().height;
		visibleTiles.x = (int)(getScreenAnchor().getX()/tileWidth);
		visibleTiles.y = (int)(getScreenAnchor().getY()/tileHeight);
		visibleTiles.width = Math.min(viewWidth/tileWidth, mapData.getWorldWidth()-1);
		visibleTiles.height = Math.min(viewHeight/tileHeight, mapData.getWorldHeight()-1);
		
		renderVisibleTiles(bg, visibleTiles.y, visibleTiles.x, visibleTiles.width, visibleTiles.height, null);
		
		g.drawImage(buffer, getScreenSpace().x, getScreenSpace().y);
		
		// DEBUG
//		g.setColor(MHColor.YELLOW);
//		g.drawRect(scrollUpZone);
//		g.drawRect(scrollDownZone);
//		g.drawRect(scrollLeftZone);
//		g.drawRect(scrollRightZone);
	}

	
	private void renderVisibleTiles(MHGraphicsCanvas g, int r0, int c0, int horizontalTiles, int verticalTiles, MHActorList actors)
	{
        MHFont font = MHFont.getDefaultFont();

		for (int layerID = 0; layerID < mapData.getNumLayers(); layerID++)
		{
			MHTileGrid layer = mapData.getLayer(layerID);
			if (layer != null && layerVisible[layerID])
			{
			    if (layerID == MHLayersEnum.WALL_DECALS.getID() && actors != null)
			    {
			        // For most regular tile maps, the most appropriate time
			        // to render the actors is after the walls and before the
			        // wall decals.  This is dramatically different from 
			        // isometric algorithms.
			        
			        // TODO:  Decide whether rectangular walls should be sorted.  I think so.
			        for (int actor = 0; actor < actors.size(); actor++)
			        {
			            MHActor a = actors.get(actor);
			            if (screenSpace.intersects(a.getBounds()))
			                a.render(g, (int)screenAnchor.x, (int)screenAnchor.y);
			        }
			    }
			    
				for (int r = r0; r <= r0+verticalTiles; r++)
				{
					for (int c = c0; c <= c0+horizontalTiles; c++)
					{
						MHVector tilePos = plotTile(r, c);
						int tpx = (int)(tilePos.getX());
						int tpy = (int)(tilePos.getY());
						
						MHTile tile = layer.getTile(r, c);
						
						if (tile != null && tile.id != MHTileSet.NULL_TILE_ID)
						{
							g.drawImage(tile.image, tpx, tpy);
		                    if (idOn)
		                    {
		                        g.setFont(font);
                                g.setColor(MHColor.WHITE);
		                        
		                        String ids = tile.id+"";
		                        int cx = tpx + getTileWidth()/2 - font.stringWidth(ids)/2;
		                        int cy = tpy + getTileHeight()/2 + font.getHeight()/2;
		                        g.drawString(ids, cx, cy);
		                    }
						}
						

						// Draw gridlines.
                        if (gridOn)
                        {
                            g.setColor(MHColor.LIGHT_GRAY);
                            g.drawLine(tpx, tpy, tpx+getTileWidth(), tpy);
                            g.drawLine(tpx, tpy, tpx, tpy+getTileHeight());
                        }
                        

                        // Draw cursor.
                        if (cursorOn)
                        {
                            if (this.getCursorAddress().row == r && this.getCursorAddress().column == c)
                            {
                                g.setColor(MHColor.GREEN);
                                g.drawRect(tpx, tpy, getTileWidth()-1, getTileHeight()-1);
                            }
                        }
						
					}
				}
			}
		}

	}
	
	
	public MHBitmapImage renderCompleteImage()
	{
	    boolean gridMode = isGridOn();
	    boolean cursorMode = isCursorOn();
	    
	    setGridOn(false);
	    setCursorOn(false);
	    
		MHBitmapImage result = MHPlatform.createImage(worldSpace.width, worldSpace.height);
		int rows = this.getMapData().getWorldHeight();
		int columns = this.getMapData().getWorldWidth();
		
		screenAnchor.setVector(0, 0);
		renderVisibleTiles(result.getGraphicsCanvas(), 0, 0, columns, rows, null);
		
		setGridOn(gridMode);
		setCursorOn(cursorMode);
		
		return result;
	}

	/****************************************************************
	 * Performs validation on the cursor's map cell address to ensure
	 * that it is within the bounds of the map.
	 */
	private void clipCursorAddress()
	{
		// clip cursor to tile map
		if (cursorAddress.column < 0)
			cursorAddress.column = 0;
		else if (cursorAddress.column > mapData.getWorldWidth() - 1)
			cursorAddress.column = mapData.getWorldWidth() - 1;

		if (cursorAddress.row < 0)
			cursorAddress.row = 0;
		else if (cursorAddress.row > mapData.getWorldHeight() - 1)
			cursorAddress.row = mapData.getWorldHeight() - 1;
	}


	public void onMouseMoved(final MHMouseTouchEvent e)
	{
		if (!isScreenCoordinate(e.getPoint())) return;
		
		// Convert to local coordinates.
		cursorPoint = screenToLocal(e.getPoint());
		
		// map the mouse coordinates
		setCursorAddress(mapMouse(e.getPoint()));
	}
	
	
	private void checkForScroll() 
	{
		if (!mouseScroll) return;
		
		MHVector mouse = MHInputEventHandler.getInstance().getMousePosition();
		
		int vSpeed = 0;
		int hSpeed = 0;
		if (this.scrollDownZone.contains(mouse))
			vSpeed = (int) (mouse.getY() - scrollDownZone.y);
		else if (this.scrollUpZone.contains(mouse))
			vSpeed = (int) (mouse.getY() - (scrollUpZone.y + scrollUpZone.height));
		
		if (this.scrollLeftZone.contains(mouse))
			hSpeed = (int) (mouse.getX() - (scrollLeftZone.x + scrollLeftZone.width));
		else if (this.scrollRightZone.contains(mouse))
			hSpeed = (int) (mouse.getX() - scrollRightZone.x);

		
		scrollMap(hSpeed, vSpeed);
	}


	public MHVector screenToLocal(MHVector screen)
	{
		// Convert to local coordinates.
		return new MHVector(screen.x - screenSpace.x, screen.y - screenSpace.y);
	}

	/****************************************************************
	 * Calculates the next map position to which an actor would walk
	 * if it were in position (<i>row</i>, <i>column</i>) and
	 * traveled in the direction specified by <i>direction</i>.
	 *
	 * @param row
	 *            The actor's current row position.
	 * @param column
	 *            The actor's current column position.
	 * @param direction
	 *            The direction in which to walk.
	 *
	 * @return A point indicating the actor's new column and row
	 *         position after walking from its original position.
	 */
	public MHMapCellAddress tileWalk(int row, int column,
			MHTileMapDirection direction)
	{
		MHMapCellAddress a = new MHMapCellAddress(row, column);

		switch (direction)
		{
		case NORTH:     a.row--;             break;
		case NORTHEAST: a.row--; a.column++; break;
		case EAST:               a.column++; break;
		case SOUTHEAST: a.row++; a.column++; break;
		case SOUTH:     a.row++;             break;
		case SOUTHWEST: a.row++; a.column--; break;
		case WEST:               a.column--; break;
		case NORTHWEST: a.row--; a.column--; break;
		case CENTER:                         break;
		default:
			break;
		}

		return a;
	}


	/****************************************************************
	 * Calculates the next map position to which an actor would walk
	 * if it were in the position specified by <i>origin</i> and
	 * traveled in the direction specified by <i>direction</i>.
	 *
	 * @param origin
	 *            The actor's current map cell position.
	 * @param direction
	 *            The direction in which to walk.
	 *
	 * @return A point indicating the actor's new column and row
	 *         position after walking from its original position.
	 */
	public MHMapCellAddress tileWalk(
			final MHMapCellAddress origin, final MHTileMapDirection direction)
	{
		return tileWalk(origin.row, origin.column, direction);
	}
	/**
	 * Returns the screenSpace.
	 * @return Rectangle2D
	 */
	public MHRectangle getScreenSpace()
	{
		return screenSpace;
	}


	public MHMapCellAddress getCursorAddress()
	{
		return cursorAddress;
	}


	/**
	 * Returns the screenAnchor.
	 * @return Point
	 */
	public MHVector getScreenAnchor()
	{
		return screenAnchor;
	}

	/**
	 * Sets the screenAnchor.
	 * @param screenAnchor The screenAnchor to set
	 */
	public void setScreenAnchor(final MHVector screenAnchor)
	{
		this.screenAnchor = screenAnchor.clone();
	}


	/**
	 * Sets the screen anchor.
	 *
	 * @param x The x coordinate of the screen anchor
	 * @param y The y coordinate of the screen anchor
	 */
	public void setScreenAnchor(final int x, final int y)
	{
		screenAnchor.setX(x);
		screenAnchor.setY(y);
	}

	
	/**
	 * Returns the cursorPoint.
	 * @return Point
	 */
	public MHVector getCursorPoint()
	{
		return cursorPoint;
	}

	
//	@Override
//	public void onMouseDown(MHMouseTouchEvent e) {
//		// TODO Auto-generated method stub
//
//	}
//
//
//	@Override
//	public void onMouseUp(MHMouseTouchEvent e) {
//		// TODO Auto-generated method stub
//
//	}


	public boolean isGridOn() {
		return gridOn;
	}


	public void setGridOn(boolean gridOn) {
		this.gridOn = gridOn;
	}
	
	
    public void setCursorOn(boolean cursorOn) {
        this.cursorOn = cursorOn;
    }
    
	
	
	
	public boolean isCursorOn()
	{
	    return cursorOn;
	}


    public boolean isIdOn()
    {
        return idOn;
    }


    public void setIdOn(boolean idOn)
    {
        this.idOn = idOn;
    }
}

